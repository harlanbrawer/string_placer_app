{"version":3,"sources":["index.tsx"],"names":["DynamicInputList","inputs","i","this","props","stringWidths","length","push","type","value","name","toString","onChange","onArrayInputChange","React","Component","StringInput","state","inputStringWidths","radioSelect","firstStrPos","lastStrPos","handleWidthArrayChange","bind","handleSpacingChange","handleSubmit","handlePosChange","event","index","parseInt","target","newWidths","slice","pop","setState","strWidths","strPos","first_string_pos","parseFloat","last_string_pos","num_strings","spacing","taken_by_string","empty_spacing","current_pos","forEach","width","strPosList","getStrPositionsFromWidths","updateOutput","onSubmit","checked","onClick","CalculatedOutput","valList","stringPos","StringCalculator","calculatedStringPos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b5b0e518.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\ninterface IEventFunction {\n\t(event: React.ChangeEvent<HTMLInputElement>): void;\n}\n\ninterface IDynamicInputListProps {\n\tstringWidths: string[];\n\tonArrayInputChange: IEventFunction;\n}\n\ninterface IDynamicInputListState {\n\n}\n\nclass DynamicInputList extends React.Component<IDynamicInputListProps, IDynamicInputListState> {\n\trender() {\n\t\tconst inputs = [];\n\t\tfor (let i = 0; i < this.props.stringWidths.length; i++) {\n\t\t\tinputs.push(<input type=\"text\" value={this.props.stringWidths[i]} name={i.toString()} onChange={this.props.onArrayInputChange} />);\n\t\t}\n\t\tinputs.push(<input type=\"text\" name={inputs.length.toString()} onChange={this.props.onArrayInputChange}/>);\n\n\t\treturn (\n\t\t\t<span>\n\t\t\t{inputs}\n\t\t\t</span>\n\t\t);\n\t}\n}\n\n\ninterface IStringInputProps {\n\tupdateOutput: (strPos: string[]) => void;\n}\n\ntype radioType = \"by_center\" | \"by_space\";\n\ninterface IStringInputState {\n\tinputStringWidths: string[];\n\tradioSelect: radioType;\n\tfirstStrPos: string,\n\tlastStrPos: string,\n}\n\nclass StringInput extends React.Component<IStringInputProps, IStringInputState> {\n\tconstructor(props: IStringInputProps) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tinputStringWidths: [],\n\t\t\tradioSelect: \"by_center\",\n\t\t\tfirstStrPos: \"\",\n\t\t\tlastStrPos: \"\",\n\t\t}\n\n    this.handleWidthArrayChange = this.handleWidthArrayChange.bind(this);\n    this.handleSpacingChange = this.handleSpacingChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handlePosChange = this.handlePosChange.bind(this);\n\t}\n\n  handleWidthArrayChange(event: React.ChangeEvent<HTMLInputElement>) {\n  \tlet index = parseInt(event.target.name);\n  \tlet newWidths = this.state.inputStringWidths.slice();\n  \tnewWidths[index] = event.target.value;\n  \twhile (newWidths.length > 0 && newWidths[newWidths.length - 1] === \"\") {\n  \t\tnewWidths.pop();\n  \t}\n\n    this.setState({inputStringWidths: newWidths});\n  }\n\n  handleSpacingChange(event: React.ChangeEvent<HTMLInputElement>) {\n  \tthis.setState({radioSelect: event.target.value as radioType});\n  }\n\n  getStrPositionsFromWidths(strWidths: string[]) {\n  \tconst strPos: string[] = [];\n  \tlet first_string_pos = parseFloat(this.state.firstStrPos);\n  \tlet last_string_pos = parseFloat(this.state.lastStrPos);\n\t\tlet num_strings = strWidths.length;\n\t\tlet length = last_string_pos - first_string_pos;\n\n  \tif (this.state.radioSelect === \"by_center\" as radioType) {\n\t\t\tlet spacing = length / (num_strings - 1);\n\t\t\tfor (let i = 0; i < num_strings; i++) {\n\t\t\t\tstrPos.push('Position: ' + (first_string_pos + i * spacing).toString() + ' --- For string width: ' + strWidths[i]);\n\t\t\t}\n  \t} else if (this.state.radioSelect === \"by_space\" as radioType) {\n\t\t\tlet taken_by_string = 0;\n\t\t\t// add half of the first and last strings\n\t\t\ttaken_by_string += (parseFloat(strWidths[0]) + parseFloat(strWidths[num_strings - 1])) / 2\n\t\t\t// add the rest of the strings\n\t\t\tlet i = 1;\n\t\t\twhile (i < num_strings - 1) {\n\t\t\t\ttaken_by_string += parseFloat(strWidths[i]);\n\t\t\t\ti += 1;\n\t  \t}\n\n\t\t\t// calculate the spacings\n\t\t\tlet empty_spacing = (length - taken_by_string) / (num_strings - 1);\n\n\t\t\t// set the array\n\t\t\tlet current_pos = first_string_pos;\n\n\t\t\tfor (i = 0; i < num_strings; i++) {\n\t\t\t\tstrPos.push('Position: ' + current_pos.toString() + ' --- For string width: ' + strWidths[i]);\n\t\t\t\tif (i === num_strings - 1) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcurrent_pos += parseFloat(strWidths[i]) / 2 + empty_spacing + parseFloat(strWidths[i + 1]) / 2;\n\t\t\t}\n  \t}\n  \treturn strPos;\n  }\n\n  handleSubmit(event: React.SyntheticEvent) {\n  \t// check if any of the slots are empty\n  \tthis.state.inputStringWidths.forEach((width) => {if (width === \"\") {return;}})\n\n  \tconst strPosList: string[] = this.getStrPositionsFromWidths(this.state.inputStringWidths);\n\n  \tthis.props.updateOutput(strPosList);\n  }\n\n  handlePosChange(event: React.ChangeEvent<HTMLInputElement>) {\n  \tif (event.target.name === \"firstStrPos\") {\n  \t\tthis.setState({firstStrPos: event.target.value});\n  \t} else if (event.target.name === \"lastStrPos\") {\n  \t\tthis.setState({lastStrPos: event.target.value});\n  \t}\n  }\n\n\trender() {\n\t\treturn (\n\t\t\t<form onSubmit={this.handleSubmit}>\n\t\t\t\t<fieldset>\n\t\t\t\t\t<label>First string position:</label>\n\t\t\t\t\t<input type=\"text\" value={this.state.firstStrPos} name=\"firstStrPos\" onChange={this.handlePosChange} /><br />\n\t\t\t\t\t<label>Last string position:</label>\n\t\t\t\t\t<input type=\"text\" value={this.state.lastStrPos} name=\"lastStrPos\" onChange={this.handlePosChange} /><br />\n\t\t\t\t\t<label>Enter string widths:\n\t\t\t\t\t<DynamicInputList stringWidths={this.state.inputStringWidths} onArrayInputChange={this.handleWidthArrayChange} /></label>\n\t\t\t\t\t<br />\n\t\t\t\t\t<label>By center\n\t\t\t\t\t<input type=\"radio\" name=\"space_type\" value=\"by_center\" onChange={this.handleSpacingChange} checked={this.state.radioSelect === \"by_center\" as radioType} /></label>\n\t\t\t\t\t<label>By spacing\n\t\t\t\t\t<input type=\"radio\" name=\"space_type\" value=\"by_space\" onChange={this.handleSpacingChange} checked={this.state.radioSelect === \"by_space\" as radioType} /></label>\n\t\t\t\t\t<br />\n\t\t\t\t\t<input type=\"button\" value=\"Calculate\" onClick={this.handleSubmit}/>\n\t\t\t\t</fieldset>\n\t\t\t</form>\n\t\t);\n\t}\n}\n\ninterface ICalculatedOutputProps {\n\tstringPos: string[];\n\t\n}\n\ninterface ICalculatedOutputState {\n\n}\n\nclass CalculatedOutput extends React.Component<ICalculatedOutputProps, ICalculatedOutputState> {\n\trender() {\n\t\tconst valList = [];\n\t\tfor (let i = 0; i < this.props.stringPos.length; i++) {\n\t\t\tvalList.push(<li>{this.props.stringPos[i]}</li>)\n\t\t}\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{this.props.stringPos.length !== 0 && <p>String positions:</p>}\n\t\t\t\t<ol>\n\t\t\t\t\t{valList}\n\t\t\t\t</ol>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\ninterface IStringCalculatorProps {\n\n}\n\ninterface IStringCalculatorState {\n\tcalculatedStringPos: string[];\n}\n\nclass StringCalculator extends React.Component<IStringCalculatorProps, IStringCalculatorState> {\n\tconstructor(props: IStringCalculatorProps) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tcalculatedStringPos: [],\n\t\t};\n\n\t\tthis.updateOutput = this.updateOutput.bind(this);\n\t}\n\n\tupdateOutput(strPos: string[]) {\n\t\tthis.setState({calculatedStringPos: strPos});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<StringInput updateOutput={this.updateOutput}/>\n\t\t\t\t<CalculatedOutput stringPos={this.state.calculatedStringPos}/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nReactDOM.render(\n  <StringCalculator />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}